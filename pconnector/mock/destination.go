// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/conduitio/conduit-connector-protocol/pconnector (interfaces: DestinationPlugin)
//
// Generated by this command:
//
//	mockgen -destination=mock/destination.go -package=mock -mock_names=DestinationPlugin=DestinationPlugin . DestinationPlugin
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	pconnector "github.com/conduitio/conduit-connector-protocol/pconnector"
	gomock "go.uber.org/mock/gomock"
)

// DestinationPlugin is a mock of DestinationPlugin interface.
type DestinationPlugin struct {
	ctrl     *gomock.Controller
	recorder *DestinationPluginMockRecorder
	isgomock struct{}
}

// DestinationPluginMockRecorder is the mock recorder for DestinationPlugin.
type DestinationPluginMockRecorder struct {
	mock *DestinationPlugin
}

// NewDestinationPlugin creates a new mock instance.
func NewDestinationPlugin(ctrl *gomock.Controller) *DestinationPlugin {
	mock := &DestinationPlugin{ctrl: ctrl}
	mock.recorder = &DestinationPluginMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *DestinationPlugin) EXPECT() *DestinationPluginMockRecorder {
	return m.recorder
}

// Configure mocks base method.
func (m *DestinationPlugin) Configure(arg0 context.Context, arg1 pconnector.DestinationConfigureRequest) (pconnector.DestinationConfigureResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Configure", arg0, arg1)
	ret0, _ := ret[0].(pconnector.DestinationConfigureResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Configure indicates an expected call of Configure.
func (mr *DestinationPluginMockRecorder) Configure(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Configure", reflect.TypeOf((*DestinationPlugin)(nil).Configure), arg0, arg1)
}

// LifecycleOnCreated mocks base method.
func (m *DestinationPlugin) LifecycleOnCreated(arg0 context.Context, arg1 pconnector.DestinationLifecycleOnCreatedRequest) (pconnector.DestinationLifecycleOnCreatedResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LifecycleOnCreated", arg0, arg1)
	ret0, _ := ret[0].(pconnector.DestinationLifecycleOnCreatedResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LifecycleOnCreated indicates an expected call of LifecycleOnCreated.
func (mr *DestinationPluginMockRecorder) LifecycleOnCreated(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LifecycleOnCreated", reflect.TypeOf((*DestinationPlugin)(nil).LifecycleOnCreated), arg0, arg1)
}

// LifecycleOnDeleted mocks base method.
func (m *DestinationPlugin) LifecycleOnDeleted(arg0 context.Context, arg1 pconnector.DestinationLifecycleOnDeletedRequest) (pconnector.DestinationLifecycleOnDeletedResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LifecycleOnDeleted", arg0, arg1)
	ret0, _ := ret[0].(pconnector.DestinationLifecycleOnDeletedResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LifecycleOnDeleted indicates an expected call of LifecycleOnDeleted.
func (mr *DestinationPluginMockRecorder) LifecycleOnDeleted(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LifecycleOnDeleted", reflect.TypeOf((*DestinationPlugin)(nil).LifecycleOnDeleted), arg0, arg1)
}

// LifecycleOnUpdated mocks base method.
func (m *DestinationPlugin) LifecycleOnUpdated(arg0 context.Context, arg1 pconnector.DestinationLifecycleOnUpdatedRequest) (pconnector.DestinationLifecycleOnUpdatedResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LifecycleOnUpdated", arg0, arg1)
	ret0, _ := ret[0].(pconnector.DestinationLifecycleOnUpdatedResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LifecycleOnUpdated indicates an expected call of LifecycleOnUpdated.
func (mr *DestinationPluginMockRecorder) LifecycleOnUpdated(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LifecycleOnUpdated", reflect.TypeOf((*DestinationPlugin)(nil).LifecycleOnUpdated), arg0, arg1)
}

// Open mocks base method.
func (m *DestinationPlugin) Open(arg0 context.Context, arg1 pconnector.DestinationOpenRequest) (pconnector.DestinationOpenResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Open", arg0, arg1)
	ret0, _ := ret[0].(pconnector.DestinationOpenResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Open indicates an expected call of Open.
func (mr *DestinationPluginMockRecorder) Open(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Open", reflect.TypeOf((*DestinationPlugin)(nil).Open), arg0, arg1)
}

// Run mocks base method.
func (m *DestinationPlugin) Run(arg0 context.Context, arg1 pconnector.DestinationRunStream) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Run indicates an expected call of Run.
func (mr *DestinationPluginMockRecorder) Run(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*DestinationPlugin)(nil).Run), arg0, arg1)
}

// Stop mocks base method.
func (m *DestinationPlugin) Stop(arg0 context.Context, arg1 pconnector.DestinationStopRequest) (pconnector.DestinationStopResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop", arg0, arg1)
	ret0, _ := ret[0].(pconnector.DestinationStopResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Stop indicates an expected call of Stop.
func (mr *DestinationPluginMockRecorder) Stop(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*DestinationPlugin)(nil).Stop), arg0, arg1)
}

// Teardown mocks base method.
func (m *DestinationPlugin) Teardown(arg0 context.Context, arg1 pconnector.DestinationTeardownRequest) (pconnector.DestinationTeardownResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Teardown", arg0, arg1)
	ret0, _ := ret[0].(pconnector.DestinationTeardownResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Teardown indicates an expected call of Teardown.
func (mr *DestinationPluginMockRecorder) Teardown(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Teardown", reflect.TypeOf((*DestinationPlugin)(nil).Teardown), arg0, arg1)
}
