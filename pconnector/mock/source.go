// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/conduitio/conduit-connector-protocol/pconnector (interfaces: SourcePlugin)
//
// Generated by this command:
//
//	mockgen -destination=mock/source.go -package=mock -mock_names=SourcePlugin=SourcePlugin . SourcePlugin
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	pconnector "github.com/conduitio/conduit-connector-protocol/pconnector"
	gomock "go.uber.org/mock/gomock"
)

// SourcePlugin is a mock of SourcePlugin interface.
type SourcePlugin struct {
	ctrl     *gomock.Controller
	recorder *SourcePluginMockRecorder
}

// SourcePluginMockRecorder is the mock recorder for SourcePlugin.
type SourcePluginMockRecorder struct {
	mock *SourcePlugin
}

// NewSourcePlugin creates a new mock instance.
func NewSourcePlugin(ctrl *gomock.Controller) *SourcePlugin {
	mock := &SourcePlugin{ctrl: ctrl}
	mock.recorder = &SourcePluginMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *SourcePlugin) EXPECT() *SourcePluginMockRecorder {
	return m.recorder
}

// Configure mocks base method.
func (m *SourcePlugin) Configure(arg0 context.Context, arg1 pconnector.SourceConfigureRequest) (pconnector.SourceConfigureResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Configure", arg0, arg1)
	ret0, _ := ret[0].(pconnector.SourceConfigureResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Configure indicates an expected call of Configure.
func (mr *SourcePluginMockRecorder) Configure(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Configure", reflect.TypeOf((*SourcePlugin)(nil).Configure), arg0, arg1)
}

// LifecycleOnCreated mocks base method.
func (m *SourcePlugin) LifecycleOnCreated(arg0 context.Context, arg1 pconnector.SourceLifecycleOnCreatedRequest) (pconnector.SourceLifecycleOnCreatedResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LifecycleOnCreated", arg0, arg1)
	ret0, _ := ret[0].(pconnector.SourceLifecycleOnCreatedResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LifecycleOnCreated indicates an expected call of LifecycleOnCreated.
func (mr *SourcePluginMockRecorder) LifecycleOnCreated(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LifecycleOnCreated", reflect.TypeOf((*SourcePlugin)(nil).LifecycleOnCreated), arg0, arg1)
}

// LifecycleOnDeleted mocks base method.
func (m *SourcePlugin) LifecycleOnDeleted(arg0 context.Context, arg1 pconnector.SourceLifecycleOnDeletedRequest) (pconnector.SourceLifecycleOnDeletedResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LifecycleOnDeleted", arg0, arg1)
	ret0, _ := ret[0].(pconnector.SourceLifecycleOnDeletedResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LifecycleOnDeleted indicates an expected call of LifecycleOnDeleted.
func (mr *SourcePluginMockRecorder) LifecycleOnDeleted(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LifecycleOnDeleted", reflect.TypeOf((*SourcePlugin)(nil).LifecycleOnDeleted), arg0, arg1)
}

// LifecycleOnUpdated mocks base method.
func (m *SourcePlugin) LifecycleOnUpdated(arg0 context.Context, arg1 pconnector.SourceLifecycleOnUpdatedRequest) (pconnector.SourceLifecycleOnUpdatedResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LifecycleOnUpdated", arg0, arg1)
	ret0, _ := ret[0].(pconnector.SourceLifecycleOnUpdatedResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LifecycleOnUpdated indicates an expected call of LifecycleOnUpdated.
func (mr *SourcePluginMockRecorder) LifecycleOnUpdated(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LifecycleOnUpdated", reflect.TypeOf((*SourcePlugin)(nil).LifecycleOnUpdated), arg0, arg1)
}

// Open mocks base method.
func (m *SourcePlugin) Open(arg0 context.Context, arg1 pconnector.SourceOpenRequest) (pconnector.SourceOpenResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Open", arg0, arg1)
	ret0, _ := ret[0].(pconnector.SourceOpenResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Open indicates an expected call of Open.
func (mr *SourcePluginMockRecorder) Open(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Open", reflect.TypeOf((*SourcePlugin)(nil).Open), arg0, arg1)
}

// Run mocks base method.
func (m *SourcePlugin) Run(arg0 context.Context, arg1 pconnector.SourceRunStream) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Run indicates an expected call of Run.
func (mr *SourcePluginMockRecorder) Run(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*SourcePlugin)(nil).Run), arg0, arg1)
}

// Stop mocks base method.
func (m *SourcePlugin) Stop(arg0 context.Context, arg1 pconnector.SourceStopRequest) (pconnector.SourceStopResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop", arg0, arg1)
	ret0, _ := ret[0].(pconnector.SourceStopResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Stop indicates an expected call of Stop.
func (mr *SourcePluginMockRecorder) Stop(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*SourcePlugin)(nil).Stop), arg0, arg1)
}

// Teardown mocks base method.
func (m *SourcePlugin) Teardown(arg0 context.Context, arg1 pconnector.SourceTeardownRequest) (pconnector.SourceTeardownResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Teardown", arg0, arg1)
	ret0, _ := ret[0].(pconnector.SourceTeardownResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Teardown indicates an expected call of Teardown.
func (mr *SourcePluginMockRecorder) Teardown(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Teardown", reflect.TypeOf((*SourcePlugin)(nil).Teardown), arg0, arg1)
}
