// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/conduitio/conduit-plugin-protocol/cpluginv1 (interfaces: SpecifierPlugin)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	cpluginv1 "github.com/conduitio/conduit-plugin-protocol/cpluginv1"
	gomock "github.com/golang/mock/gomock"
)

// SpecifierPlugin is a mock of SpecifierPlugin interface.
type SpecifierPlugin struct {
	ctrl     *gomock.Controller
	recorder *SpecifierPluginMockRecorder
}

// SpecifierPluginMockRecorder is the mock recorder for SpecifierPlugin.
type SpecifierPluginMockRecorder struct {
	mock *SpecifierPlugin
}

// NewSpecifierPlugin creates a new mock instance.
func NewSpecifierPlugin(ctrl *gomock.Controller) *SpecifierPlugin {
	mock := &SpecifierPlugin{ctrl: ctrl}
	mock.recorder = &SpecifierPluginMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *SpecifierPlugin) EXPECT() *SpecifierPluginMockRecorder {
	return m.recorder
}

// Specify mocks base method.
func (m *SpecifierPlugin) Specify(arg0 context.Context, arg1 cpluginv1.SpecifierSpecifyRequest) (cpluginv1.SpecifierSpecifyResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Specify", arg0, arg1)
	ret0, _ := ret[0].(cpluginv1.SpecifierSpecifyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Specify indicates an expected call of Specify.
func (mr *SpecifierPluginMockRecorder) Specify(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Specify", reflect.TypeOf((*SpecifierPlugin)(nil).Specify), arg0, arg1)
}
