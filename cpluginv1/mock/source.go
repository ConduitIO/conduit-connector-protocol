// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/conduitio/conduit-connector-protocol/cpluginv1 (interfaces: SourcePlugin,SourceRunStream)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	cpluginv1 "github.com/conduitio/conduit-connector-protocol/cpluginv1"
	gomock "github.com/golang/mock/gomock"
)

// SourcePlugin is a mock of SourcePlugin interface.
type SourcePlugin struct {
	ctrl     *gomock.Controller
	recorder *SourcePluginMockRecorder
}

// SourcePluginMockRecorder is the mock recorder for SourcePlugin.
type SourcePluginMockRecorder struct {
	mock *SourcePlugin
}

// NewSourcePlugin creates a new mock instance.
func NewSourcePlugin(ctrl *gomock.Controller) *SourcePlugin {
	mock := &SourcePlugin{ctrl: ctrl}
	mock.recorder = &SourcePluginMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *SourcePlugin) EXPECT() *SourcePluginMockRecorder {
	return m.recorder
}

// Configure mocks base method.
func (m *SourcePlugin) Configure(arg0 context.Context, arg1 cpluginv1.SourceConfigureRequest) (cpluginv1.SourceConfigureResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Configure", arg0, arg1)
	ret0, _ := ret[0].(cpluginv1.SourceConfigureResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Configure indicates an expected call of Configure.
func (mr *SourcePluginMockRecorder) Configure(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Configure", reflect.TypeOf((*SourcePlugin)(nil).Configure), arg0, arg1)
}

// Run mocks base method.
func (m *SourcePlugin) Run(arg0 context.Context, arg1 cpluginv1.SourceRunStream) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Run indicates an expected call of Run.
func (mr *SourcePluginMockRecorder) Run(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*SourcePlugin)(nil).Run), arg0, arg1)
}

// Start mocks base method.
func (m *SourcePlugin) Start(arg0 context.Context, arg1 cpluginv1.SourceStartRequest) (cpluginv1.SourceStartResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start", arg0, arg1)
	ret0, _ := ret[0].(cpluginv1.SourceStartResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Start indicates an expected call of Start.
func (mr *SourcePluginMockRecorder) Start(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*SourcePlugin)(nil).Start), arg0, arg1)
}

// Stop mocks base method.
func (m *SourcePlugin) Stop(arg0 context.Context, arg1 cpluginv1.SourceStopRequest) (cpluginv1.SourceStopResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop", arg0, arg1)
	ret0, _ := ret[0].(cpluginv1.SourceStopResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Stop indicates an expected call of Stop.
func (mr *SourcePluginMockRecorder) Stop(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*SourcePlugin)(nil).Stop), arg0, arg1)
}

// Teardown mocks base method.
func (m *SourcePlugin) Teardown(arg0 context.Context, arg1 cpluginv1.SourceTeardownRequest) (cpluginv1.SourceTeardownResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Teardown", arg0, arg1)
	ret0, _ := ret[0].(cpluginv1.SourceTeardownResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Teardown indicates an expected call of Teardown.
func (mr *SourcePluginMockRecorder) Teardown(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Teardown", reflect.TypeOf((*SourcePlugin)(nil).Teardown), arg0, arg1)
}

// SourceRunStream is a mock of SourceRunStream interface.
type SourceRunStream struct {
	ctrl     *gomock.Controller
	recorder *SourceRunStreamMockRecorder
}

// SourceRunStreamMockRecorder is the mock recorder for SourceRunStream.
type SourceRunStreamMockRecorder struct {
	mock *SourceRunStream
}

// NewSourceRunStream creates a new mock instance.
func NewSourceRunStream(ctrl *gomock.Controller) *SourceRunStream {
	mock := &SourceRunStream{ctrl: ctrl}
	mock.recorder = &SourceRunStreamMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *SourceRunStream) EXPECT() *SourceRunStreamMockRecorder {
	return m.recorder
}

// Recv mocks base method.
func (m *SourceRunStream) Recv() (cpluginv1.SourceRunRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(cpluginv1.SourceRunRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *SourceRunStreamMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*SourceRunStream)(nil).Recv))
}

// Send mocks base method.
func (m *SourceRunStream) Send(arg0 cpluginv1.SourceRunResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *SourceRunStreamMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*SourceRunStream)(nil).Send), arg0)
}
