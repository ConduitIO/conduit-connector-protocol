// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/conduitio/conduit-connector-protocol/conduit/pschema (interfaces: Service)
//
// Generated by this command:
//
//	mockgen -typed -destination=mock/pschema.go -package=mock -mock_names=Service=Service . Service
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	pschema "github.com/conduitio/conduit-connector-protocol/conduit/pschema"
	gomock "go.uber.org/mock/gomock"
)

// Service is a mock of Service interface.
type Service struct {
	ctrl     *gomock.Controller
	recorder *ServiceMockRecorder
}

// ServiceMockRecorder is the mock recorder for Service.
type ServiceMockRecorder struct {
	mock *Service
}

// NewService creates a new mock instance.
func NewService(ctrl *gomock.Controller) *Service {
	mock := &Service{ctrl: ctrl}
	mock.recorder = &ServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Service) EXPECT() *ServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *Service) Create(arg0 context.Context, arg1 pschema.CreateRequest) (pschema.CreateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(pschema.CreateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *ServiceMockRecorder) Create(arg0, arg1 any) *ServiceCreateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*Service)(nil).Create), arg0, arg1)
	return &ServiceCreateCall{Call: call}
}

// ServiceCreateCall wrap *gomock.Call
type ServiceCreateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ServiceCreateCall) Return(arg0 pschema.CreateResponse, arg1 error) *ServiceCreateCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ServiceCreateCall) Do(f func(context.Context, pschema.CreateRequest) (pschema.CreateResponse, error)) *ServiceCreateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ServiceCreateCall) DoAndReturn(f func(context.Context, pschema.CreateRequest) (pschema.CreateResponse, error)) *ServiceCreateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Get mocks base method.
func (m *Service) Get(arg0 context.Context, arg1 pschema.GetRequest) (pschema.GetResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(pschema.GetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *ServiceMockRecorder) Get(arg0, arg1 any) *ServiceGetCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*Service)(nil).Get), arg0, arg1)
	return &ServiceGetCall{Call: call}
}

// ServiceGetCall wrap *gomock.Call
type ServiceGetCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ServiceGetCall) Return(arg0 pschema.GetResponse, arg1 error) *ServiceGetCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ServiceGetCall) Do(f func(context.Context, pschema.GetRequest) (pschema.GetResponse, error)) *ServiceGetCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ServiceGetCall) DoAndReturn(f func(context.Context, pschema.GetRequest) (pschema.GetResponse, error)) *ServiceGetCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
