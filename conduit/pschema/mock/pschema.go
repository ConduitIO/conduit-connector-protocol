// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/conduitio/conduit-connector-protocol/conduit/pschema (interfaces: Service)
//
// Generated by this command:
//
//	mockgen -typed -destination=mock/pschema.go -package=mock -mock_names=Service=Service . Service
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	pschema "github.com/conduitio/conduit-connector-protocol/conduit/pschema"
	gomock "go.uber.org/mock/gomock"
)

// Service is a mock of Service interface.
type Service struct {
	ctrl     *gomock.Controller
	recorder *ServiceMockRecorder
}

// ServiceMockRecorder is the mock recorder for Service.
type ServiceMockRecorder struct {
	mock *Service
}

// NewService creates a new mock instance.
func NewService(ctrl *gomock.Controller) *Service {
	mock := &Service{ctrl: ctrl}
	mock.recorder = &ServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Service) EXPECT() *ServiceMockRecorder {
	return m.recorder
}

// CreateSchema mocks base method.
func (m *Service) CreateSchema(arg0 context.Context, arg1 pschema.CreateSchemaRequest) (pschema.CreateSchemaResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSchema", arg0, arg1)
	ret0, _ := ret[0].(pschema.CreateSchemaResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSchema indicates an expected call of CreateSchema.
func (mr *ServiceMockRecorder) CreateSchema(arg0, arg1 any) *ServiceCreateSchemaCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSchema", reflect.TypeOf((*Service)(nil).CreateSchema), arg0, arg1)
	return &ServiceCreateSchemaCall{Call: call}
}

// ServiceCreateSchemaCall wrap *gomock.Call
type ServiceCreateSchemaCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ServiceCreateSchemaCall) Return(arg0 pschema.CreateSchemaResponse, arg1 error) *ServiceCreateSchemaCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ServiceCreateSchemaCall) Do(f func(context.Context, pschema.CreateSchemaRequest) (pschema.CreateSchemaResponse, error)) *ServiceCreateSchemaCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ServiceCreateSchemaCall) DoAndReturn(f func(context.Context, pschema.CreateSchemaRequest) (pschema.CreateSchemaResponse, error)) *ServiceCreateSchemaCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetSchema mocks base method.
func (m *Service) GetSchema(arg0 context.Context, arg1 pschema.GetSchemaRequest) (pschema.GetSchemaResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSchema", arg0, arg1)
	ret0, _ := ret[0].(pschema.GetSchemaResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSchema indicates an expected call of GetSchema.
func (mr *ServiceMockRecorder) GetSchema(arg0, arg1 any) *ServiceGetSchemaCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSchema", reflect.TypeOf((*Service)(nil).GetSchema), arg0, arg1)
	return &ServiceGetSchemaCall{Call: call}
}

// ServiceGetSchemaCall wrap *gomock.Call
type ServiceGetSchemaCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ServiceGetSchemaCall) Return(arg0 pschema.GetSchemaResponse, arg1 error) *ServiceGetSchemaCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ServiceGetSchemaCall) Do(f func(context.Context, pschema.GetSchemaRequest) (pschema.GetSchemaResponse, error)) *ServiceGetSchemaCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ServiceGetSchemaCall) DoAndReturn(f func(context.Context, pschema.GetSchemaRequest) (pschema.GetSchemaResponse, error)) *ServiceGetSchemaCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
