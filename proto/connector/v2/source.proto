syntax = "proto3";

package connector.v2;

import "google/protobuf/descriptor.proto";
import "opencdc/v1/opencdc.proto";

option go_package = "github.com/conduitio/conduit-connector-protocol/proto/connector/v2";

// SourcePlugin is responsible for fetching records from 3rd party resources and
// sending them to Conduit.
service SourcePlugin {
  // Configure is the first function to be called in a plugin. It provides the
  // plugin with the configuration that needs to be validated and stored. In
  // case the configuration is not valid it should return an error status.
  rpc Configure(Source.Configure.Request) returns (Source.Configure.Response);
  // Open is called after Configure to signal the plugin it can prepare to
  // start producing records. If needed, the plugin should open connections in
  // this function. The position parameter will contain the position of the
  // last record that was successfully processed. The Source should therefore
  // start producing records after this position.
  rpc Open(Source.Open.Request) returns (Source.Open.Response);
  // Run will open a bidirectional stream between Conduit and the plugin.
  // The plugin is responsible for fetching records from 3rd party resources
  // and sending them as responses to Conduit. Conduit will process the
  // records asynchronously and send acknowledgments back to the plugin to
  // signal that a record at a certain position was processed. Acknowledgments
  // will be sent back to the connector in the same order as the records
  // produced by the connector. If a record could not be processed by Conduit,
  // the stream will be closed without an acknowledgment being sent back to the
  // connector.
  rpc Run(stream Source.Run.Request) returns (stream Source.Run.Response);
  // Stop signals to the plugin to stop retrieving new records and flush any
  // records that might be cached into the stream. It should block until it can
  // determine the last record that will be sent to the stream and return the
  // position of the last record. Conduit will keep the stream open until it
  // receives the last record and sends back any outstanding acknowledgments.
  // If Conduit did not send an acknowledgment for a record after the stream is
  // closed, it should be interpreted as a negative acknowledgment.
  rpc Stop(Source.Stop.Request) returns (Source.Stop.Response);
  // Teardown signals to the plugin that there will be no more calls to any
  // other function. After Teardown returns, the plugin should be ready for a
  // graceful shutdown.
  rpc Teardown(Source.Teardown.Request) returns (Source.Teardown.Response);

  // -- Lifecycle events -------------------------------------------------------

  // LifecycleOnCreated is called after Configure and before Open when the
  // connector is run for the first time. This call will be skipped if a
  // connector was already started before. This method can be used to do some
  // initialization that needs to happen only once in the lifetime of a
  // connector (e.g. create a replication slot). Anything that the connector
  // creates in this method is considered to be owned by this connector and
  // should be cleaned up in LifecycleOnDeleted.
  rpc LifecycleOnCreated(Source.Lifecycle.OnCreated.Request) returns (Source.Lifecycle.OnCreated.Response);
  // LifecycleOnUpdated is called after Configure and before Open when the
  // connector configuration has changed since the last run. This call will be
  // skipped if the connector configuration did not change. It can be used to
  // update anything that was initialized in LifecycleOnCreated, in case the
  // configuration change affects it.
  rpc LifecycleOnUpdated(Source.Lifecycle.OnUpdated.Request) returns (Source.Lifecycle.OnUpdated.Response);
  // LifecycleOnDeleted is called when the connector was deleted. It will be the
  // only method that is called in that case. This method can be used to clean
  // up anything that was initialized in LifecycleOnCreated.
  rpc LifecycleOnDeleted(Source.Lifecycle.OnDeleted.Request) returns (Source.Lifecycle.OnDeleted.Response);
}

message Source {
  message Configure {
    message Request {
      // Config contains the raw plugin settings.
      map<string, string> config = 1;
    }
    message Response {}
  }

  message Open {
    message Request {
      // This is the position of the last record that was successfully
      // processed. The Source should start producing records after this
      // position.
      bytes position = 1;
    }
    message Response {}
  }

  message Run {
    message Request {
      // These are the positions of the records that were successfully
      // processed.
      repeated bytes ack_positions = 1;
    }
    message Response {
      // Records contains the OpenCDC records read by the source from the 3rd
      // party resource.
      repeated opencdc.v1.Record records = 1;
    }
  }

  message Stop {
    message Request {}
    message Response {
      // This is the position of the last record in the stream, Conduit
      // won't process records after this position anymore. After the
      // record with this position is received by Conduit and all
      // outstanding acknowledgments were delivered to the connector, the
      // stream will be closed.
      bytes last_position = 1;
    }
  }

  message Teardown {
    message Request {}
    message Response {}
  }

  message Lifecycle {
    message OnCreated {
      message Request {
        // This is the connector configuration that was also passed to
        // Configure, therefore it's already validated.
        map<string, string> config = 1;
      }
      message Response {}
    }
    message OnUpdated {
      message Request {
        // This is the old connector configuration that was used the last time
        // the connector was running. It was valid at that time, since it passed
        // through the Configure function.
        map<string, string> config_before = 1;
        // This is the new connector configuration that was also passed to
        // Configure, therefore it's already validated.
        map<string, string> config_after = 2;
      }
      message Response {}
    }
    message OnDeleted {
      message Request {
        // This is the old connector configuration that was used the last time
        // the connector was running. It was valid at that time, since it passed
        // through the Configure function.
        map<string, string> config = 1;
      }
      message Response {}
    }
  }
}
