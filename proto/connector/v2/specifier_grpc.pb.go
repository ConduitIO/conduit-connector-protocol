// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: connector/v2/specifier.proto

package connectorv2

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	SpecifierPlugin_Specify_FullMethodName = "/connector.v2.SpecifierPlugin/Specify"
)

// SpecifierPluginClient is the client API for SpecifierPlugin service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SpecifierPluginClient interface {
	// Specify should return the plugin specification.
	Specify(ctx context.Context, in *Specifier_Specify_Request, opts ...grpc.CallOption) (*Specifier_Specify_Response, error)
}

type specifierPluginClient struct {
	cc grpc.ClientConnInterface
}

func NewSpecifierPluginClient(cc grpc.ClientConnInterface) SpecifierPluginClient {
	return &specifierPluginClient{cc}
}

func (c *specifierPluginClient) Specify(ctx context.Context, in *Specifier_Specify_Request, opts ...grpc.CallOption) (*Specifier_Specify_Response, error) {
	out := new(Specifier_Specify_Response)
	err := c.cc.Invoke(ctx, SpecifierPlugin_Specify_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SpecifierPluginServer is the server API for SpecifierPlugin service.
// All implementations must embed UnimplementedSpecifierPluginServer
// for forward compatibility
type SpecifierPluginServer interface {
	// Specify should return the plugin specification.
	Specify(context.Context, *Specifier_Specify_Request) (*Specifier_Specify_Response, error)
	mustEmbedUnimplementedSpecifierPluginServer()
}

// UnimplementedSpecifierPluginServer must be embedded to have forward compatible implementations.
type UnimplementedSpecifierPluginServer struct {
}

func (UnimplementedSpecifierPluginServer) Specify(context.Context, *Specifier_Specify_Request) (*Specifier_Specify_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Specify not implemented")
}
func (UnimplementedSpecifierPluginServer) mustEmbedUnimplementedSpecifierPluginServer() {}

// UnsafeSpecifierPluginServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SpecifierPluginServer will
// result in compilation errors.
type UnsafeSpecifierPluginServer interface {
	mustEmbedUnimplementedSpecifierPluginServer()
}

func RegisterSpecifierPluginServer(s grpc.ServiceRegistrar, srv SpecifierPluginServer) {
	s.RegisterService(&SpecifierPlugin_ServiceDesc, srv)
}

func _SpecifierPlugin_Specify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Specifier_Specify_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpecifierPluginServer).Specify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SpecifierPlugin_Specify_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpecifierPluginServer).Specify(ctx, req.(*Specifier_Specify_Request))
	}
	return interceptor(ctx, in, info, handler)
}

// SpecifierPlugin_ServiceDesc is the grpc.ServiceDesc for SpecifierPlugin service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SpecifierPlugin_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "connector.v2.SpecifierPlugin",
	HandlerType: (*SpecifierPluginServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Specify",
			Handler:    _SpecifierPlugin_Specify_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "connector/v2/specifier.proto",
}
