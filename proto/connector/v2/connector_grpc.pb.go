// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: connector/v2/connector.proto

package connectorv2

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	SourcePlugin_Configure_FullMethodName          = "/connector.v2.SourcePlugin/Configure"
	SourcePlugin_Open_FullMethodName               = "/connector.v2.SourcePlugin/Open"
	SourcePlugin_Run_FullMethodName                = "/connector.v2.SourcePlugin/Run"
	SourcePlugin_Stop_FullMethodName               = "/connector.v2.SourcePlugin/Stop"
	SourcePlugin_Teardown_FullMethodName           = "/connector.v2.SourcePlugin/Teardown"
	SourcePlugin_LifecycleOnCreated_FullMethodName = "/connector.v2.SourcePlugin/LifecycleOnCreated"
	SourcePlugin_LifecycleOnUpdated_FullMethodName = "/connector.v2.SourcePlugin/LifecycleOnUpdated"
	SourcePlugin_LifecycleOnDeleted_FullMethodName = "/connector.v2.SourcePlugin/LifecycleOnDeleted"
)

// SourcePluginClient is the client API for SourcePlugin service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SourcePluginClient interface {
	// Configure is the first function to be called in a plugin. It provides the
	// plugin with the configuration that needs to be validated and stored. In
	// case the configuration is not valid it should return an error status.
	Configure(ctx context.Context, in *Source_Configure_Request, opts ...grpc.CallOption) (*Source_Configure_Response, error)
	// Open is called after Configure to signal the plugin it can prepare to
	// start producing records. If needed, the plugin should open connections in
	// this function. The position parameter will contain the position of the
	// last record that was successfully processed. The Source should therefore
	// start producing records after this position.
	Open(ctx context.Context, in *Source_Open_Request, opts ...grpc.CallOption) (*Source_Open_Response, error)
	// Run will open a bidirectional stream between Conduit and the plugin.
	// The plugin is responsible for fetching records from 3rd party resources
	// and sending them as responses to Conduit. Conduit will process the
	// records asynchronously and send acknowledgments back to the plugin to
	// signal that a record at a certain position was processed. Acknowledgments
	// will be sent back to the connector in the same order as the records
	// produced by the connector. If a record could not be processed by Conduit,
	// the stream will be closed without an acknowledgment being sent back to the
	// connector.
	Run(ctx context.Context, opts ...grpc.CallOption) (SourcePlugin_RunClient, error)
	// Stop signals to the plugin to stop retrieving new records and flush any
	// records that might be cached into the stream. It should block until it can
	// determine the last record that will be sent to the stream and return the
	// position of the last record. Conduit will keep the stream open until it
	// receives the last record and sends back any outstanding acknowledgments.
	// If Conduit did not send an acknowledgment for a record after the stream is
	// closed, it should be interpreted as a negative acknowledgment.
	Stop(ctx context.Context, in *Source_Stop_Request, opts ...grpc.CallOption) (*Source_Stop_Response, error)
	// Teardown signals to the plugin that there will be no more calls to any
	// other function. After Teardown returns, the plugin should be ready for a
	// graceful shutdown.
	Teardown(ctx context.Context, in *Source_Teardown_Request, opts ...grpc.CallOption) (*Source_Teardown_Response, error)
	// LifecycleOnCreated is called after Configure and before Open when the
	// connector is run for the first time. This call will be skipped if a
	// connector was already started before. This method can be used to do some
	// initialization that needs to happen only once in the lifetime of a
	// connector (e.g. create a replication slot). Anything that the connector
	// creates in this method is considered to be owned by this connector and
	// should be cleaned up in LifecycleOnDeleted.
	LifecycleOnCreated(ctx context.Context, in *Source_Lifecycle_OnCreated_Request, opts ...grpc.CallOption) (*Source_Lifecycle_OnCreated_Response, error)
	// LifecycleOnUpdated is called after Configure and before Open when the
	// connector configuration has changed since the last run. This call will be
	// skipped if the connector configuration did not change. It can be used to
	// update anything that was initialized in LifecycleOnCreated, in case the
	// configuration change affects it.
	LifecycleOnUpdated(ctx context.Context, in *Source_Lifecycle_OnUpdated_Request, opts ...grpc.CallOption) (*Source_Lifecycle_OnUpdated_Response, error)
	// LifecycleOnDeleted is called when the connector was deleted. It will be the
	// only method that is called in that case. This method can be used to clean
	// up anything that was initialized in LifecycleOnCreated.
	LifecycleOnDeleted(ctx context.Context, in *Source_Lifecycle_OnDeleted_Request, opts ...grpc.CallOption) (*Source_Lifecycle_OnDeleted_Response, error)
}

type sourcePluginClient struct {
	cc grpc.ClientConnInterface
}

func NewSourcePluginClient(cc grpc.ClientConnInterface) SourcePluginClient {
	return &sourcePluginClient{cc}
}

func (c *sourcePluginClient) Configure(ctx context.Context, in *Source_Configure_Request, opts ...grpc.CallOption) (*Source_Configure_Response, error) {
	out := new(Source_Configure_Response)
	err := c.cc.Invoke(ctx, SourcePlugin_Configure_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sourcePluginClient) Open(ctx context.Context, in *Source_Open_Request, opts ...grpc.CallOption) (*Source_Open_Response, error) {
	out := new(Source_Open_Response)
	err := c.cc.Invoke(ctx, SourcePlugin_Open_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sourcePluginClient) Run(ctx context.Context, opts ...grpc.CallOption) (SourcePlugin_RunClient, error) {
	stream, err := c.cc.NewStream(ctx, &SourcePlugin_ServiceDesc.Streams[0], SourcePlugin_Run_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &sourcePluginRunClient{stream}
	return x, nil
}

type SourcePlugin_RunClient interface {
	Send(*Source_Run_Request) error
	Recv() (*Source_Run_Response, error)
	grpc.ClientStream
}

type sourcePluginRunClient struct {
	grpc.ClientStream
}

func (x *sourcePluginRunClient) Send(m *Source_Run_Request) error {
	return x.ClientStream.SendMsg(m)
}

func (x *sourcePluginRunClient) Recv() (*Source_Run_Response, error) {
	m := new(Source_Run_Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *sourcePluginClient) Stop(ctx context.Context, in *Source_Stop_Request, opts ...grpc.CallOption) (*Source_Stop_Response, error) {
	out := new(Source_Stop_Response)
	err := c.cc.Invoke(ctx, SourcePlugin_Stop_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sourcePluginClient) Teardown(ctx context.Context, in *Source_Teardown_Request, opts ...grpc.CallOption) (*Source_Teardown_Response, error) {
	out := new(Source_Teardown_Response)
	err := c.cc.Invoke(ctx, SourcePlugin_Teardown_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sourcePluginClient) LifecycleOnCreated(ctx context.Context, in *Source_Lifecycle_OnCreated_Request, opts ...grpc.CallOption) (*Source_Lifecycle_OnCreated_Response, error) {
	out := new(Source_Lifecycle_OnCreated_Response)
	err := c.cc.Invoke(ctx, SourcePlugin_LifecycleOnCreated_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sourcePluginClient) LifecycleOnUpdated(ctx context.Context, in *Source_Lifecycle_OnUpdated_Request, opts ...grpc.CallOption) (*Source_Lifecycle_OnUpdated_Response, error) {
	out := new(Source_Lifecycle_OnUpdated_Response)
	err := c.cc.Invoke(ctx, SourcePlugin_LifecycleOnUpdated_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sourcePluginClient) LifecycleOnDeleted(ctx context.Context, in *Source_Lifecycle_OnDeleted_Request, opts ...grpc.CallOption) (*Source_Lifecycle_OnDeleted_Response, error) {
	out := new(Source_Lifecycle_OnDeleted_Response)
	err := c.cc.Invoke(ctx, SourcePlugin_LifecycleOnDeleted_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SourcePluginServer is the server API for SourcePlugin service.
// All implementations must embed UnimplementedSourcePluginServer
// for forward compatibility
type SourcePluginServer interface {
	// Configure is the first function to be called in a plugin. It provides the
	// plugin with the configuration that needs to be validated and stored. In
	// case the configuration is not valid it should return an error status.
	Configure(context.Context, *Source_Configure_Request) (*Source_Configure_Response, error)
	// Open is called after Configure to signal the plugin it can prepare to
	// start producing records. If needed, the plugin should open connections in
	// this function. The position parameter will contain the position of the
	// last record that was successfully processed. The Source should therefore
	// start producing records after this position.
	Open(context.Context, *Source_Open_Request) (*Source_Open_Response, error)
	// Run will open a bidirectional stream between Conduit and the plugin.
	// The plugin is responsible for fetching records from 3rd party resources
	// and sending them as responses to Conduit. Conduit will process the
	// records asynchronously and send acknowledgments back to the plugin to
	// signal that a record at a certain position was processed. Acknowledgments
	// will be sent back to the connector in the same order as the records
	// produced by the connector. If a record could not be processed by Conduit,
	// the stream will be closed without an acknowledgment being sent back to the
	// connector.
	Run(SourcePlugin_RunServer) error
	// Stop signals to the plugin to stop retrieving new records and flush any
	// records that might be cached into the stream. It should block until it can
	// determine the last record that will be sent to the stream and return the
	// position of the last record. Conduit will keep the stream open until it
	// receives the last record and sends back any outstanding acknowledgments.
	// If Conduit did not send an acknowledgment for a record after the stream is
	// closed, it should be interpreted as a negative acknowledgment.
	Stop(context.Context, *Source_Stop_Request) (*Source_Stop_Response, error)
	// Teardown signals to the plugin that there will be no more calls to any
	// other function. After Teardown returns, the plugin should be ready for a
	// graceful shutdown.
	Teardown(context.Context, *Source_Teardown_Request) (*Source_Teardown_Response, error)
	// LifecycleOnCreated is called after Configure and before Open when the
	// connector is run for the first time. This call will be skipped if a
	// connector was already started before. This method can be used to do some
	// initialization that needs to happen only once in the lifetime of a
	// connector (e.g. create a replication slot). Anything that the connector
	// creates in this method is considered to be owned by this connector and
	// should be cleaned up in LifecycleOnDeleted.
	LifecycleOnCreated(context.Context, *Source_Lifecycle_OnCreated_Request) (*Source_Lifecycle_OnCreated_Response, error)
	// LifecycleOnUpdated is called after Configure and before Open when the
	// connector configuration has changed since the last run. This call will be
	// skipped if the connector configuration did not change. It can be used to
	// update anything that was initialized in LifecycleOnCreated, in case the
	// configuration change affects it.
	LifecycleOnUpdated(context.Context, *Source_Lifecycle_OnUpdated_Request) (*Source_Lifecycle_OnUpdated_Response, error)
	// LifecycleOnDeleted is called when the connector was deleted. It will be the
	// only method that is called in that case. This method can be used to clean
	// up anything that was initialized in LifecycleOnCreated.
	LifecycleOnDeleted(context.Context, *Source_Lifecycle_OnDeleted_Request) (*Source_Lifecycle_OnDeleted_Response, error)
	mustEmbedUnimplementedSourcePluginServer()
}

// UnimplementedSourcePluginServer must be embedded to have forward compatible implementations.
type UnimplementedSourcePluginServer struct {
}

func (UnimplementedSourcePluginServer) Configure(context.Context, *Source_Configure_Request) (*Source_Configure_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Configure not implemented")
}
func (UnimplementedSourcePluginServer) Open(context.Context, *Source_Open_Request) (*Source_Open_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Open not implemented")
}
func (UnimplementedSourcePluginServer) Run(SourcePlugin_RunServer) error {
	return status.Errorf(codes.Unimplemented, "method Run not implemented")
}
func (UnimplementedSourcePluginServer) Stop(context.Context, *Source_Stop_Request) (*Source_Stop_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stop not implemented")
}
func (UnimplementedSourcePluginServer) Teardown(context.Context, *Source_Teardown_Request) (*Source_Teardown_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Teardown not implemented")
}
func (UnimplementedSourcePluginServer) LifecycleOnCreated(context.Context, *Source_Lifecycle_OnCreated_Request) (*Source_Lifecycle_OnCreated_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LifecycleOnCreated not implemented")
}
func (UnimplementedSourcePluginServer) LifecycleOnUpdated(context.Context, *Source_Lifecycle_OnUpdated_Request) (*Source_Lifecycle_OnUpdated_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LifecycleOnUpdated not implemented")
}
func (UnimplementedSourcePluginServer) LifecycleOnDeleted(context.Context, *Source_Lifecycle_OnDeleted_Request) (*Source_Lifecycle_OnDeleted_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LifecycleOnDeleted not implemented")
}
func (UnimplementedSourcePluginServer) mustEmbedUnimplementedSourcePluginServer() {}

// UnsafeSourcePluginServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SourcePluginServer will
// result in compilation errors.
type UnsafeSourcePluginServer interface {
	mustEmbedUnimplementedSourcePluginServer()
}

func RegisterSourcePluginServer(s grpc.ServiceRegistrar, srv SourcePluginServer) {
	s.RegisterService(&SourcePlugin_ServiceDesc, srv)
}

func _SourcePlugin_Configure_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Source_Configure_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SourcePluginServer).Configure(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SourcePlugin_Configure_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SourcePluginServer).Configure(ctx, req.(*Source_Configure_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _SourcePlugin_Open_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Source_Open_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SourcePluginServer).Open(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SourcePlugin_Open_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SourcePluginServer).Open(ctx, req.(*Source_Open_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _SourcePlugin_Run_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SourcePluginServer).Run(&sourcePluginRunServer{stream})
}

type SourcePlugin_RunServer interface {
	Send(*Source_Run_Response) error
	Recv() (*Source_Run_Request, error)
	grpc.ServerStream
}

type sourcePluginRunServer struct {
	grpc.ServerStream
}

func (x *sourcePluginRunServer) Send(m *Source_Run_Response) error {
	return x.ServerStream.SendMsg(m)
}

func (x *sourcePluginRunServer) Recv() (*Source_Run_Request, error) {
	m := new(Source_Run_Request)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _SourcePlugin_Stop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Source_Stop_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SourcePluginServer).Stop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SourcePlugin_Stop_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SourcePluginServer).Stop(ctx, req.(*Source_Stop_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _SourcePlugin_Teardown_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Source_Teardown_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SourcePluginServer).Teardown(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SourcePlugin_Teardown_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SourcePluginServer).Teardown(ctx, req.(*Source_Teardown_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _SourcePlugin_LifecycleOnCreated_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Source_Lifecycle_OnCreated_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SourcePluginServer).LifecycleOnCreated(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SourcePlugin_LifecycleOnCreated_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SourcePluginServer).LifecycleOnCreated(ctx, req.(*Source_Lifecycle_OnCreated_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _SourcePlugin_LifecycleOnUpdated_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Source_Lifecycle_OnUpdated_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SourcePluginServer).LifecycleOnUpdated(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SourcePlugin_LifecycleOnUpdated_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SourcePluginServer).LifecycleOnUpdated(ctx, req.(*Source_Lifecycle_OnUpdated_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _SourcePlugin_LifecycleOnDeleted_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Source_Lifecycle_OnDeleted_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SourcePluginServer).LifecycleOnDeleted(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SourcePlugin_LifecycleOnDeleted_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SourcePluginServer).LifecycleOnDeleted(ctx, req.(*Source_Lifecycle_OnDeleted_Request))
	}
	return interceptor(ctx, in, info, handler)
}

// SourcePlugin_ServiceDesc is the grpc.ServiceDesc for SourcePlugin service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SourcePlugin_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "connector.v2.SourcePlugin",
	HandlerType: (*SourcePluginServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Configure",
			Handler:    _SourcePlugin_Configure_Handler,
		},
		{
			MethodName: "Open",
			Handler:    _SourcePlugin_Open_Handler,
		},
		{
			MethodName: "Stop",
			Handler:    _SourcePlugin_Stop_Handler,
		},
		{
			MethodName: "Teardown",
			Handler:    _SourcePlugin_Teardown_Handler,
		},
		{
			MethodName: "LifecycleOnCreated",
			Handler:    _SourcePlugin_LifecycleOnCreated_Handler,
		},
		{
			MethodName: "LifecycleOnUpdated",
			Handler:    _SourcePlugin_LifecycleOnUpdated_Handler,
		},
		{
			MethodName: "LifecycleOnDeleted",
			Handler:    _SourcePlugin_LifecycleOnDeleted_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Run",
			Handler:       _SourcePlugin_Run_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "connector/v2/connector.proto",
}

const (
	DestinationPlugin_Configure_FullMethodName          = "/connector.v2.DestinationPlugin/Configure"
	DestinationPlugin_Open_FullMethodName               = "/connector.v2.DestinationPlugin/Open"
	DestinationPlugin_Run_FullMethodName                = "/connector.v2.DestinationPlugin/Run"
	DestinationPlugin_Stop_FullMethodName               = "/connector.v2.DestinationPlugin/Stop"
	DestinationPlugin_Teardown_FullMethodName           = "/connector.v2.DestinationPlugin/Teardown"
	DestinationPlugin_LifecycleOnCreated_FullMethodName = "/connector.v2.DestinationPlugin/LifecycleOnCreated"
	DestinationPlugin_LifecycleOnUpdated_FullMethodName = "/connector.v2.DestinationPlugin/LifecycleOnUpdated"
	DestinationPlugin_LifecycleOnDeleted_FullMethodName = "/connector.v2.DestinationPlugin/LifecycleOnDeleted"
)

// DestinationPluginClient is the client API for DestinationPlugin service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DestinationPluginClient interface {
	// Configure is the first function to be called in a plugin. It provides the
	// plugin with the configuration that needs to be validated and stored. In
	// case the configuration is not valid it should return an error status.
	Configure(ctx context.Context, in *Destination_Configure_Request, opts ...grpc.CallOption) (*Destination_Configure_Response, error)
	// Open is called after Configure to signal the plugin it can prepare to
	// start writing records. If needed, the plugin should open connections in
	// this function.
	Open(ctx context.Context, in *Destination_Open_Request, opts ...grpc.CallOption) (*Destination_Open_Response, error)
	// Run will open a bidirectional stream between Conduit and the plugin.
	// Conduit will be streaming records to the plugin that should be written
	// to the 3rd party resource. The plugin is responsible for sending
	// acknowledgments back to Conduit once a record has been processed. The
	// acknowledgment should contain an error in case a record could not be
	// successfully processed. The stream should still stay open in case Conduit
	// is able to recover from the error and the pipeline keeps running.
	Run(ctx context.Context, opts ...grpc.CallOption) (DestinationPlugin_RunClient, error)
	// Stop signals to the plugin that the record with the specified position is
	// the last one and no more records will be written to the stream after it.
	// Once the plugin receives the last record it should flush any records that
	// might be cached and not yet written to the 3rd party resource.
	Stop(ctx context.Context, in *Destination_Stop_Request, opts ...grpc.CallOption) (*Destination_Stop_Response, error)
	// Teardown signals to the plugin that there will be no more calls to any
	// other function. After Teardown returns, the plugin should be ready for a
	// graceful shutdown.
	Teardown(ctx context.Context, in *Destination_Teardown_Request, opts ...grpc.CallOption) (*Destination_Teardown_Response, error)
	// LifecycleOnCreated is called after Configure and before Open when the
	// connector is run for the first time. This call will be skipped if a
	// connector was already started before. This method can be used to do some
	// initialization that needs to happen only once in the lifetime of a
	// connector (e.g. create a bucket). Anything that the connector creates in
	// this method is considered to be owned by this connector and should be
	// cleaned up in LifecycleOnDeleted.
	LifecycleOnCreated(ctx context.Context, in *Destination_Lifecycle_OnCreated_Request, opts ...grpc.CallOption) (*Destination_Lifecycle_OnCreated_Response, error)
	// LifecycleOnUpdated is called after Configure and before Open when the
	// connector configuration has changed since the last run. This call will be
	// skipped if the connector configuration did not change. It can be used to
	// update anything that was initialized in LifecycleOnCreated, in case the
	// configuration change affects it.
	LifecycleOnUpdated(ctx context.Context, in *Destination_Lifecycle_OnUpdated_Request, opts ...grpc.CallOption) (*Destination_Lifecycle_OnUpdated_Response, error)
	// LifecycleOnDeleted is called when the connector was deleted. It will be the
	// only method that is called in that case. This method can be used to clean
	// up anything that was initialized in LifecycleOnCreated.
	LifecycleOnDeleted(ctx context.Context, in *Destination_Lifecycle_OnDeleted_Request, opts ...grpc.CallOption) (*Destination_Lifecycle_OnDeleted_Response, error)
}

type destinationPluginClient struct {
	cc grpc.ClientConnInterface
}

func NewDestinationPluginClient(cc grpc.ClientConnInterface) DestinationPluginClient {
	return &destinationPluginClient{cc}
}

func (c *destinationPluginClient) Configure(ctx context.Context, in *Destination_Configure_Request, opts ...grpc.CallOption) (*Destination_Configure_Response, error) {
	out := new(Destination_Configure_Response)
	err := c.cc.Invoke(ctx, DestinationPlugin_Configure_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *destinationPluginClient) Open(ctx context.Context, in *Destination_Open_Request, opts ...grpc.CallOption) (*Destination_Open_Response, error) {
	out := new(Destination_Open_Response)
	err := c.cc.Invoke(ctx, DestinationPlugin_Open_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *destinationPluginClient) Run(ctx context.Context, opts ...grpc.CallOption) (DestinationPlugin_RunClient, error) {
	stream, err := c.cc.NewStream(ctx, &DestinationPlugin_ServiceDesc.Streams[0], DestinationPlugin_Run_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &destinationPluginRunClient{stream}
	return x, nil
}

type DestinationPlugin_RunClient interface {
	Send(*Destination_Run_Request) error
	Recv() (*Destination_Run_Response, error)
	grpc.ClientStream
}

type destinationPluginRunClient struct {
	grpc.ClientStream
}

func (x *destinationPluginRunClient) Send(m *Destination_Run_Request) error {
	return x.ClientStream.SendMsg(m)
}

func (x *destinationPluginRunClient) Recv() (*Destination_Run_Response, error) {
	m := new(Destination_Run_Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *destinationPluginClient) Stop(ctx context.Context, in *Destination_Stop_Request, opts ...grpc.CallOption) (*Destination_Stop_Response, error) {
	out := new(Destination_Stop_Response)
	err := c.cc.Invoke(ctx, DestinationPlugin_Stop_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *destinationPluginClient) Teardown(ctx context.Context, in *Destination_Teardown_Request, opts ...grpc.CallOption) (*Destination_Teardown_Response, error) {
	out := new(Destination_Teardown_Response)
	err := c.cc.Invoke(ctx, DestinationPlugin_Teardown_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *destinationPluginClient) LifecycleOnCreated(ctx context.Context, in *Destination_Lifecycle_OnCreated_Request, opts ...grpc.CallOption) (*Destination_Lifecycle_OnCreated_Response, error) {
	out := new(Destination_Lifecycle_OnCreated_Response)
	err := c.cc.Invoke(ctx, DestinationPlugin_LifecycleOnCreated_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *destinationPluginClient) LifecycleOnUpdated(ctx context.Context, in *Destination_Lifecycle_OnUpdated_Request, opts ...grpc.CallOption) (*Destination_Lifecycle_OnUpdated_Response, error) {
	out := new(Destination_Lifecycle_OnUpdated_Response)
	err := c.cc.Invoke(ctx, DestinationPlugin_LifecycleOnUpdated_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *destinationPluginClient) LifecycleOnDeleted(ctx context.Context, in *Destination_Lifecycle_OnDeleted_Request, opts ...grpc.CallOption) (*Destination_Lifecycle_OnDeleted_Response, error) {
	out := new(Destination_Lifecycle_OnDeleted_Response)
	err := c.cc.Invoke(ctx, DestinationPlugin_LifecycleOnDeleted_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DestinationPluginServer is the server API for DestinationPlugin service.
// All implementations must embed UnimplementedDestinationPluginServer
// for forward compatibility
type DestinationPluginServer interface {
	// Configure is the first function to be called in a plugin. It provides the
	// plugin with the configuration that needs to be validated and stored. In
	// case the configuration is not valid it should return an error status.
	Configure(context.Context, *Destination_Configure_Request) (*Destination_Configure_Response, error)
	// Open is called after Configure to signal the plugin it can prepare to
	// start writing records. If needed, the plugin should open connections in
	// this function.
	Open(context.Context, *Destination_Open_Request) (*Destination_Open_Response, error)
	// Run will open a bidirectional stream between Conduit and the plugin.
	// Conduit will be streaming records to the plugin that should be written
	// to the 3rd party resource. The plugin is responsible for sending
	// acknowledgments back to Conduit once a record has been processed. The
	// acknowledgment should contain an error in case a record could not be
	// successfully processed. The stream should still stay open in case Conduit
	// is able to recover from the error and the pipeline keeps running.
	Run(DestinationPlugin_RunServer) error
	// Stop signals to the plugin that the record with the specified position is
	// the last one and no more records will be written to the stream after it.
	// Once the plugin receives the last record it should flush any records that
	// might be cached and not yet written to the 3rd party resource.
	Stop(context.Context, *Destination_Stop_Request) (*Destination_Stop_Response, error)
	// Teardown signals to the plugin that there will be no more calls to any
	// other function. After Teardown returns, the plugin should be ready for a
	// graceful shutdown.
	Teardown(context.Context, *Destination_Teardown_Request) (*Destination_Teardown_Response, error)
	// LifecycleOnCreated is called after Configure and before Open when the
	// connector is run for the first time. This call will be skipped if a
	// connector was already started before. This method can be used to do some
	// initialization that needs to happen only once in the lifetime of a
	// connector (e.g. create a bucket). Anything that the connector creates in
	// this method is considered to be owned by this connector and should be
	// cleaned up in LifecycleOnDeleted.
	LifecycleOnCreated(context.Context, *Destination_Lifecycle_OnCreated_Request) (*Destination_Lifecycle_OnCreated_Response, error)
	// LifecycleOnUpdated is called after Configure and before Open when the
	// connector configuration has changed since the last run. This call will be
	// skipped if the connector configuration did not change. It can be used to
	// update anything that was initialized in LifecycleOnCreated, in case the
	// configuration change affects it.
	LifecycleOnUpdated(context.Context, *Destination_Lifecycle_OnUpdated_Request) (*Destination_Lifecycle_OnUpdated_Response, error)
	// LifecycleOnDeleted is called when the connector was deleted. It will be the
	// only method that is called in that case. This method can be used to clean
	// up anything that was initialized in LifecycleOnCreated.
	LifecycleOnDeleted(context.Context, *Destination_Lifecycle_OnDeleted_Request) (*Destination_Lifecycle_OnDeleted_Response, error)
	mustEmbedUnimplementedDestinationPluginServer()
}

// UnimplementedDestinationPluginServer must be embedded to have forward compatible implementations.
type UnimplementedDestinationPluginServer struct {
}

func (UnimplementedDestinationPluginServer) Configure(context.Context, *Destination_Configure_Request) (*Destination_Configure_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Configure not implemented")
}
func (UnimplementedDestinationPluginServer) Open(context.Context, *Destination_Open_Request) (*Destination_Open_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Open not implemented")
}
func (UnimplementedDestinationPluginServer) Run(DestinationPlugin_RunServer) error {
	return status.Errorf(codes.Unimplemented, "method Run not implemented")
}
func (UnimplementedDestinationPluginServer) Stop(context.Context, *Destination_Stop_Request) (*Destination_Stop_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stop not implemented")
}
func (UnimplementedDestinationPluginServer) Teardown(context.Context, *Destination_Teardown_Request) (*Destination_Teardown_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Teardown not implemented")
}
func (UnimplementedDestinationPluginServer) LifecycleOnCreated(context.Context, *Destination_Lifecycle_OnCreated_Request) (*Destination_Lifecycle_OnCreated_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LifecycleOnCreated not implemented")
}
func (UnimplementedDestinationPluginServer) LifecycleOnUpdated(context.Context, *Destination_Lifecycle_OnUpdated_Request) (*Destination_Lifecycle_OnUpdated_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LifecycleOnUpdated not implemented")
}
func (UnimplementedDestinationPluginServer) LifecycleOnDeleted(context.Context, *Destination_Lifecycle_OnDeleted_Request) (*Destination_Lifecycle_OnDeleted_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LifecycleOnDeleted not implemented")
}
func (UnimplementedDestinationPluginServer) mustEmbedUnimplementedDestinationPluginServer() {}

// UnsafeDestinationPluginServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DestinationPluginServer will
// result in compilation errors.
type UnsafeDestinationPluginServer interface {
	mustEmbedUnimplementedDestinationPluginServer()
}

func RegisterDestinationPluginServer(s grpc.ServiceRegistrar, srv DestinationPluginServer) {
	s.RegisterService(&DestinationPlugin_ServiceDesc, srv)
}

func _DestinationPlugin_Configure_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Destination_Configure_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DestinationPluginServer).Configure(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DestinationPlugin_Configure_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DestinationPluginServer).Configure(ctx, req.(*Destination_Configure_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _DestinationPlugin_Open_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Destination_Open_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DestinationPluginServer).Open(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DestinationPlugin_Open_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DestinationPluginServer).Open(ctx, req.(*Destination_Open_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _DestinationPlugin_Run_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DestinationPluginServer).Run(&destinationPluginRunServer{stream})
}

type DestinationPlugin_RunServer interface {
	Send(*Destination_Run_Response) error
	Recv() (*Destination_Run_Request, error)
	grpc.ServerStream
}

type destinationPluginRunServer struct {
	grpc.ServerStream
}

func (x *destinationPluginRunServer) Send(m *Destination_Run_Response) error {
	return x.ServerStream.SendMsg(m)
}

func (x *destinationPluginRunServer) Recv() (*Destination_Run_Request, error) {
	m := new(Destination_Run_Request)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _DestinationPlugin_Stop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Destination_Stop_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DestinationPluginServer).Stop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DestinationPlugin_Stop_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DestinationPluginServer).Stop(ctx, req.(*Destination_Stop_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _DestinationPlugin_Teardown_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Destination_Teardown_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DestinationPluginServer).Teardown(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DestinationPlugin_Teardown_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DestinationPluginServer).Teardown(ctx, req.(*Destination_Teardown_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _DestinationPlugin_LifecycleOnCreated_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Destination_Lifecycle_OnCreated_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DestinationPluginServer).LifecycleOnCreated(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DestinationPlugin_LifecycleOnCreated_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DestinationPluginServer).LifecycleOnCreated(ctx, req.(*Destination_Lifecycle_OnCreated_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _DestinationPlugin_LifecycleOnUpdated_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Destination_Lifecycle_OnUpdated_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DestinationPluginServer).LifecycleOnUpdated(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DestinationPlugin_LifecycleOnUpdated_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DestinationPluginServer).LifecycleOnUpdated(ctx, req.(*Destination_Lifecycle_OnUpdated_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _DestinationPlugin_LifecycleOnDeleted_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Destination_Lifecycle_OnDeleted_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DestinationPluginServer).LifecycleOnDeleted(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DestinationPlugin_LifecycleOnDeleted_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DestinationPluginServer).LifecycleOnDeleted(ctx, req.(*Destination_Lifecycle_OnDeleted_Request))
	}
	return interceptor(ctx, in, info, handler)
}

// DestinationPlugin_ServiceDesc is the grpc.ServiceDesc for DestinationPlugin service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DestinationPlugin_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "connector.v2.DestinationPlugin",
	HandlerType: (*DestinationPluginServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Configure",
			Handler:    _DestinationPlugin_Configure_Handler,
		},
		{
			MethodName: "Open",
			Handler:    _DestinationPlugin_Open_Handler,
		},
		{
			MethodName: "Stop",
			Handler:    _DestinationPlugin_Stop_Handler,
		},
		{
			MethodName: "Teardown",
			Handler:    _DestinationPlugin_Teardown_Handler,
		},
		{
			MethodName: "LifecycleOnCreated",
			Handler:    _DestinationPlugin_LifecycleOnCreated_Handler,
		},
		{
			MethodName: "LifecycleOnUpdated",
			Handler:    _DestinationPlugin_LifecycleOnUpdated_Handler,
		},
		{
			MethodName: "LifecycleOnDeleted",
			Handler:    _DestinationPlugin_LifecycleOnDeleted_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Run",
			Handler:       _DestinationPlugin_Run_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "connector/v2/connector.proto",
}

const (
	SpecifierPlugin_Specify_FullMethodName = "/connector.v2.SpecifierPlugin/Specify"
)

// SpecifierPluginClient is the client API for SpecifierPlugin service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SpecifierPluginClient interface {
	// Specify should return the plugin specification.
	Specify(ctx context.Context, in *Specifier_Specify_Request, opts ...grpc.CallOption) (*Specifier_Specify_Response, error)
}

type specifierPluginClient struct {
	cc grpc.ClientConnInterface
}

func NewSpecifierPluginClient(cc grpc.ClientConnInterface) SpecifierPluginClient {
	return &specifierPluginClient{cc}
}

func (c *specifierPluginClient) Specify(ctx context.Context, in *Specifier_Specify_Request, opts ...grpc.CallOption) (*Specifier_Specify_Response, error) {
	out := new(Specifier_Specify_Response)
	err := c.cc.Invoke(ctx, SpecifierPlugin_Specify_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SpecifierPluginServer is the server API for SpecifierPlugin service.
// All implementations must embed UnimplementedSpecifierPluginServer
// for forward compatibility
type SpecifierPluginServer interface {
	// Specify should return the plugin specification.
	Specify(context.Context, *Specifier_Specify_Request) (*Specifier_Specify_Response, error)
	mustEmbedUnimplementedSpecifierPluginServer()
}

// UnimplementedSpecifierPluginServer must be embedded to have forward compatible implementations.
type UnimplementedSpecifierPluginServer struct {
}

func (UnimplementedSpecifierPluginServer) Specify(context.Context, *Specifier_Specify_Request) (*Specifier_Specify_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Specify not implemented")
}
func (UnimplementedSpecifierPluginServer) mustEmbedUnimplementedSpecifierPluginServer() {}

// UnsafeSpecifierPluginServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SpecifierPluginServer will
// result in compilation errors.
type UnsafeSpecifierPluginServer interface {
	mustEmbedUnimplementedSpecifierPluginServer()
}

func RegisterSpecifierPluginServer(s grpc.ServiceRegistrar, srv SpecifierPluginServer) {
	s.RegisterService(&SpecifierPlugin_ServiceDesc, srv)
}

func _SpecifierPlugin_Specify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Specifier_Specify_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpecifierPluginServer).Specify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SpecifierPlugin_Specify_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpecifierPluginServer).Specify(ctx, req.(*Specifier_Specify_Request))
	}
	return interceptor(ctx, in, info, handler)
}

// SpecifierPlugin_ServiceDesc is the grpc.ServiceDesc for SpecifierPlugin service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SpecifierPlugin_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "connector.v2.SpecifierPlugin",
	HandlerType: (*SpecifierPluginServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Specify",
			Handler:    _SpecifierPlugin_Specify_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "connector/v2/connector.proto",
}
